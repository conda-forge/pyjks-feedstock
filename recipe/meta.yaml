{% set name = "pyjks" %}
{% set version = "20.0.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 0378cec15fb11b2ed27ba54dad9fd987d48e6f62f49fcff138f5f7a8b312b044

build:
  number: 0
  script: '{{ PYTHON }} -m pip install . --no-deps --ignore-installed -vv '
  noarch: python

requirements:
  host:
    - python
    - pip
    - pyasn1
    - pyasn1-modules
    - javaobj-py3
    - pycryptodome
    - twofish
  run:
    - python
    - pyasn1
    - pyasn1-modules
    - javaobj-py3
    - pycryptodome
    - twofish

test:
  imports:
    - jks

about:
  home: http://github.com/kurtbrose/pyjks
  license: MIT
  license_file: LICENSE
  license_family: MIT
  summary: Pure-Python Java Keystore (JKS) library
  description: "PyJKS enables Python projects to load and manipulate Java KeyStore\n(JKS) data without a JVM dependency. PyJKS supports JKS, JCEKS, BKS\nand UBER\
    \ (BouncyCastle) keystores. Simply::\n\n  pip install pyjks\n\nOr::\n\n  easy_install pyjks\n\nThen::\n\n  import jks\n\n  keystore = jks.KeyStore.load('keystore.jks',\
    \ 'passphrase')\n\n  print(ks.private_keys)\n  print(ks.certs)\n  print(ks.secret_keys)\n\nAnd that's barely scratching the surface. Check out `the usage examples\
    \ on\nGitHub <https://github.com/kurtbrose/pyjks#usage-examples>`_ for\nmore!\n\n"

extra:
  recipe-maintainers:
    - msarahan
